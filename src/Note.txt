- automation testing is better because it's faster which saves time
- it eliminates tediousness and tiredness which increases the quality of our code
- with automation, we can append many test cases into our test suite in large project
- automation testing is very useful in regression testing

---- Cucumber Framework ----

- since POs are not technical people, the Cucumber framework helps to simplifier our test in a less technical terms for them to understand.

- As mentioned previously:

-In Mavin you simplify your project dependencies in Mavin configuration files that it automatically downloads. Without Mavin, you need to manually download it and attach it to your project which is time-consuming and tedious.

- Selenium came with APIs which help to interact with Web Elements. Without Selenium, you will need to build the APIs with Java program.

- Junit is used to run our test result, validate expected and actual result.

- Selenium, to interact with Web Elements

-- WebDriverManager---
- Two things are needed to run the automation testing: the browser and the WebDriver engine.
- the WebDriver takes the script (the codes written) and executive them on top of the web browser.

- You are validating or executing the on top of the web browser
- every browser has their own engines and versions

- without the WebDriverManager, you have to pick the browser specific engine and compatibility to work with the WebDriver

- WebDriverManager is an additional library added to selenium framework.

---Cucumber
- there is no support for Cucumber in selenium, so we use plugins added to our intellij to help speed up the Cucumber project.

- Cucumber helps to add capabilities to our project with the help of the plugins

---To add the Cucumber-based capabilities do the following:
- IntelliJ Idea < preferences < plugins < search Gherkin & cucumber for java - these two plugins are needed. After download, the intellijIdea will start identifying the cucumber data files.

-- Every Cucumber-based project is a completely different structure, and they need have three components:
i- run-up file: contains how to run the project- run configurations
ii- feature file: contains test cases written in Gherkin language (simple English)
iii- step definition file: where step definitions are written with java code logic.

Steps:
create runner-up file, find feature file -- Since there is no cucumber support in Java, so feature file is a file where you will write your test cases in simple Gherkin language.

- the Gherkin plugin helps intellij to identify the .feature file as a cucumber file

-- inside the step definition, we have to fill the logic of interacting with web elements using the selenium framework

- In cucumber, the Gherkin plugin helps to speed up the development, supports features of cucumber-based files. And Cucumber for Java plugin helps to identify the corresponding method to feature file content when each line of the file is highlighted.

-- to accept the cookies, find the element (pick the locator) in the DOM tree and click on it.

-- chropath plugin (from chrome web store)- helps us to identify the locators (web elements).
-- chropath won't work when you run your application in cognitive mode.

-- remove from buffer, clear from memory

----COMPARING REL XPATH IN CHROPATH WITH XPATH DOM HTML
rel xpath (chropath)- //input[@id='header-big-screen-search-box'] --- BETTER
dom xpath- //*[@id="header-big-screen-search-box"]

//tagName[att = attVal]
1000 tags - 10 input tags

--- for search button ---
rel xpath (chropath)- //header/div[1]/nav[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[1]/form[1]/button[1]/img[1]

dom xpath- //*[@id="header-search-form"]/button/img - BETTER
